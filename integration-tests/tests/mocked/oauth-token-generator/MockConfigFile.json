{
  "StateMachines": {
    "oauth-token-generator": {
      "TestCases": {
        "Happy": {
          "Fetch HMRC OAuth URL": "GetOAuthUrlSuccess",
          "Invoke HMRC OAuth Token API": "InvokeHMRCAPISuccess",
          "Store Bearer Token": "StoreBearerTokenSuccess",
          "Update Scheduler Time": "UpdateScheduleTimeSuccess",
          "Get StackName":"GetStackName"
        },
        "HappyOnLastTry": {
          "Fetch HMRC OAuth URL": "GetOAuthUrlSuccess",
          "Invoke HMRC OAuth Token API": "InvokeHMRCAPIFailFailSucceed",
          "Store Bearer Token": "StoreBearerTokenSuccess",
          "Update Scheduler Time": "UpdateScheduleTimeSuccess",
          "Get StackName":"GetStackName"
        },
        "hmrcAPIFail": {
          "Fetch HMRC OAuth URL": "GetOAuthUrlSuccess",
          "Invoke HMRC OAuth Token API": "InvokeHMRCAPIFail",
          "Get StackName":"GetStackName"
        }
      }
    }
  },
  "MockedResponses": {
    "GetStackName": {
      "0": {
        "Return": {
          "value": "dummy-value"
        }
      }
    },
    "GetOAuthUrlSuccess": {
      "0": {
        "Return": {
          "Parameter": {
            "Name": "hmrc_oauth_url",
            "Type": "String",
            "Value": "test-oauth-token-url"
          }
        }
      }
    },
    "InvokeHMRCAPISuccess": {
      "0": {
        "Return": {
          "StatusCode": 200,
          "Payload": {
            "token": "999999999999",
            "tokenExpiry": 999999999999,
            "tokenExpiryInMinutes": 240
          }
        }
      }
    },
    "StoreBearerTokenSuccess": {
      "0": {
        "Return": {
          "StatusCode": 200
        }
      }
    },
    "InvokeHMRCAPIFail": {
      "0-3": {
        "Throw": {
          "Error": "InternalServerException",
          "Cause": "Internal Server Exception"
        }
      }
    },
    "InvokeHMRCAPIFailFailSucceed": {
      "0": {
        "Throw": {
          "Error": "Lambda.ResourceNotReadyException",
          "Cause": "Lambda resource is not ready."
        }
      },
      "1-2": {
        "Throw": {
          "Error": "Lambda.TimeoutException",
          "Cause": "Lambda timed out."
        }
      },
      "3": {
        "Return": {
          "StatusCode": 200,
          "Payload": {
            "token": "999999999999",
            "tokenExpiry": 999999999999,
            "tokenExpiryInMinutes": 240
          }
        }
      }
    },
    "UpdateScheduleTimeSuccess": {
      "0": {
        "Return": {}
      }
    }
  }
}
